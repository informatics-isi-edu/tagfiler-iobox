Tagfiler Outbox
~~~~~~~~~~~~~~~

Tagfiler Outbox is a client-side utility for registering directory trees 
as tags in a Tagfiler service.

System Requirements
~~~~~~~~~~~~~~~~~~~

Tagfiler Outbox is a python based utility. You must have a Python interpreter 
installed on your system. Python version 2.6+ is required. No additional 
packages are needed for the basic functionality. We have tested on Mac OS X 
10.7, CentOS 5, and Fedora Core 11.

For additional functionality:
  * PyDICOM is required for DICOM support.

Installation
~~~~~~~~~~~~

To install from the Subversion repository:

  0. Check out the code from SVN from the following location
     https://svn2.misd.isi.edu/repos/tagfiler/tagfiler-iobox/trunk.

  1. Continue with the following instructions...

To install from a source distribution:

  2. cd into the source directory.

  3. Run 'python setup.py install'. You may chose the installation directory 
     using the --prefix=/path/to/installation/directory option. Note that you
     may need to install as 'superuser' using sudo on Linux and Mac OS X if
     you install in the default location.

Configuration
~~~~~~~~~~~~~

By default, Tagfile Outbox will look for a configuration file at:
  ${HOME}/.tagfiler/outbox.conf

The following is a sample minimal configuration file.

--DO NOT INCLUDE THIS LINE--
{
    "url": "https://pooka.isi.edu/tagfiler",
    "username": "demo",
    "password": "demo",
    "roots": [
        "/tmp/fubar"
    ]
}
--DO NOT INCLUDE THIS LINE--

The following includes optional parameters to dictate the location of the state
 database file, the endpoint name to be used in the default 'name=...' tag for
each subject to be registered, and the number of bulk operations to be 
performed per call to the Tagfiler service. It excludes all files found under 
the root directory unless they match the inclusion patterns "foo" and "bar". In
 addition to the default 'name=...' tag, it also creates a tag named 'loopback'
 based on a 'template' rule, which means that after extracting text based on
the 'pattern' it uses the parameterized text referred to as 'path' within the
regular expression template. It also creates two 'positional' tags based on 
positional text extracted using the regular expression. The first position is 
assigned as the 'date' tag and the second position extracted is assigned as 
the 'session' tag. Note that the 'date' tagdef is by default defined in a 
basic installation of Tagfiler, however, the 'session' tagdef must be defined. 
This is true for any tag generated by the Outbox. A corresponding tagdef must 
exist for it in Tagfiler otherwise the service will return an error.

--DO NOT INCLUDE THIS LINE--
{
    "name": "Outbox",
    "state_db": "/Users/demo/.tagfiler/state.db",
    "url": "https://pooka.isi.edu/tagfiler",
    "username": "demo",
    "password": "demo",
    "endpoint": "demo#demohost",
    "bulk_ops_max": 1000,
    "roots": [
        "/tmp/fubar"
    ],
    "excludes": [ 
        ".*"
    ],
    "includes": [
        "foo", "bar"
    ],
    "rules": [
        {
            "pattern": "^(?P<path>.*)",
            "tag": "loopback",
            "extract": "template",
            "template": "file://localhost\\g<path>"
        },
        {
            "pattern": "^/.*/studies/([^/]+)/([^/]+)/",
            "tags": ["date", "session"],
            "extract": "positional"
        }
    ]
}
--DO NOT INCLUDE THIS LINE--

The following example is for a new feature, which is still under development. 
This feature allows parsing of comma-separated values (CSV) files, and 
creating tags based on each line (or rather row) of the file. The CSV file 
will still be tagged as usual per the "rules" section of the configuration, 
but in addition, if the file matches the "prepattern" of the "linerule" then 
the linerule will also be invoked on the file.

--INSERT INTO CONFIG FILE ANYWHERE BETWEEN THE OUTTER CURLY BRACKETS--
    "linerules": [
        {
            "prepattern": ".*\\.csv$",
            "namefield": "patient_id"
        }
    ]
--INSERT INTO CONFIG FILE ANYWHERE BETWEEN THE OUTTER CURLY BRACKETS--

In the above linerule example, the rule's prepattern matches files that end in 
"csv" such as files with the common file extension ".csv". At present, the 
behavior is to take the first row of the CSV file, as its header row, and 
create tags such that tag m,n = (name=<header column x>, value=<column x>) for
each subject m. Then for each subject m, it is assigned a name composed of the
filename of the file, then a ":" separator, followed by the value for the 
column identified by the "namefield" in the linerule. Thus in the above 
example, it expects a header column matching "patient_id" and it will use the
subsequent values from that column to compose each subject's name. 

Another feature under development is DICOM metadata extraction. In this case, 
the IOBox extracts the key, value pairs for each tagname in the tagnames field 
of the rule. Each pair is turned into a tag added to the file.

--INSERT INTO CONFIG FILE ANYWHERE BETWEEN THE OUTTER CURLY BRACKETS--
    "dicomrules": [
        {
            "prepattern": ".*\\.dcm$",
            "tagnames": ["StudyID", "StudyDate"]
        }
    ]
--INSERT INTO CONFIG FILE ANYWHERE BETWEEN THE OUTTER CURLY BRACKETS--

Usage
~~~~~

Use the following command to run the Tagfiler Outbox:
$ tagfiler-outbox

For help on command line arguments, use:
$ tagfiler-outbox --help

For verbose output, repeat the verbose argument ('-v' or '--verbose') up to 
three times:
$ tagfiler-outbox -vvv

The following command would traverse the directory tree rooted at '/tmp/fubar',
 and create default tags of 'name=gsiftp://`hostname`/...' for each file or 
directory found under the root. It would register the subjects in the tagfiler 
according to the url, username, and password settings below.

$ tagfiler-outbox --url https://pooka.isi.edu/tagfiler --username demo \
 --password demo --root /tmp/fubar

Limitations
~~~~~~~~~~~

If the state database file cannot be created or if the state database contents 
are corrupted, the Outbox may fail less than gracefully. Use --help to locate 
your default tagfiler state database file or use the argument or configuration 
setting to specify the desired file to use for state.

Some command-line arguments have not been thoroughly tested. When in doubt, 
use the configuration file settings over the command-line arguments.

Error messages are returned from the Tagfiler service and the Outbox passes 
them through to the console output or logger. The Outbox does not attempt to
interpret most errors. The error messages are only as informative as the 
Tagfiler service provides.

The Outbox has been most thoroughly tested on Mac OS X 10.7.5 and lightly 
tested on Windows 7 and variations of Linux.

The unit tests in the Outbox source package are not finished and do not yet
work. They should be ignored.

If you are registering 1000s of tags in a Tagfiler service, it is strongly 
recommended that you install Tagfiler using a Postgres 9.2 database management 
system. Our tests against Postgres 8.x backed Tagfiler services indicate 
significant slowdown after the first several thousand tags have been 
registered.

The largest directory of files used in testing numbered around 55,000. File 
sizes ranged from a few hundred bytes to a few gigabytes per file.

Errors encountered during the processing pipeline are recorded and printed to 
stderr when the Outbox is finished. On large directories, there could be a 
large number of errors reported. It is advisable to redirect stderr to a file.
